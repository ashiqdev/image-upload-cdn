# source: https://us1.prisma.sh/ashiqur-rahman/image-upload/dev
# timestamp: Sun Dec 08 2019 13:26:06 GMT+0600 (+06)

type AggregateChampion {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Champion implements Node {
  id: ID!
  name: String!
  publicId: String!
}

"""A connection to a list of items."""
type ChampionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChampionEdge]!
  aggregate: AggregateChampion!
}

input ChampionCreateInput {
  id: ID
  name: String!
  publicId: String!
}

"""An edge in a connection."""
type ChampionEdge {
  """The item at the end of the edge."""
  node: Champion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChampionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  publicId_ASC
  publicId_DESC
}

type ChampionPreviousValues {
  id: ID!
  name: String!
  publicId: String!
}

type ChampionSubscriptionPayload {
  mutation: MutationType!
  node: Champion
  updatedFields: [String!]
  previousValues: ChampionPreviousValues
}

input ChampionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChampionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChampionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChampionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChampionWhereInput
}

input ChampionUpdateInput {
  name: String
  publicId: String
}

input ChampionUpdateManyMutationInput {
  name: String
  publicId: String
}

input ChampionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChampionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChampionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChampionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  publicId: String

  """All values that are not equal to given value."""
  publicId_not: String

  """All values that are contained in given list."""
  publicId_in: [String!]

  """All values that are not contained in given list."""
  publicId_not_in: [String!]

  """All values less than the given value."""
  publicId_lt: String

  """All values less than or equal the given value."""
  publicId_lte: String

  """All values greater than the given value."""
  publicId_gt: String

  """All values greater than or equal the given value."""
  publicId_gte: String

  """All values containing the given string."""
  publicId_contains: String

  """All values not containing the given string."""
  publicId_not_contains: String

  """All values starting with the given string."""
  publicId_starts_with: String

  """All values not starting with the given string."""
  publicId_not_starts_with: String

  """All values ending with the given string."""
  publicId_ends_with: String

  """All values not ending with the given string."""
  publicId_not_ends_with: String
}

input ChampionWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createChampion(data: ChampionCreateInput!): Champion!
  updateChampion(data: ChampionUpdateInput!, where: ChampionWhereUniqueInput!): Champion
  deleteChampion(where: ChampionWhereUniqueInput!): Champion
  upsertChampion(where: ChampionWhereUniqueInput!, create: ChampionCreateInput!, update: ChampionUpdateInput!): Champion!
  updateManyChampions(data: ChampionUpdateManyMutationInput!, where: ChampionWhereInput): BatchPayload!
  deleteManyChampions(where: ChampionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  champions(where: ChampionWhereInput, orderBy: ChampionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Champion]!
  champion(where: ChampionWhereUniqueInput!): Champion
  championsConnection(where: ChampionWhereInput, orderBy: ChampionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChampionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  champion(where: ChampionSubscriptionWhereInput): ChampionSubscriptionPayload
}
