# source: https://us1.prisma.sh/ashiqur-rahman/image-upload/dev
# timestamp: Sun Dec 08 2019 22:54:58 GMT+0600 (+06)

type AggregateImage {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Image implements Node {
  id: ID!
  original: String!
  w200: String!
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  original: String!
  w200: String!
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  original_ASC
  original_DESC
  w200_ASC
  w200_DESC
}

type ImagePreviousValues {
  id: ID!
  original: String!
  w200: String!
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateInput {
  original: String
  w200: String
}

input ImageUpdateManyMutationInput {
  original: String
  w200: String
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  original: String

  """All values that are not equal to given value."""
  original_not: String

  """All values that are contained in given list."""
  original_in: [String!]

  """All values that are not contained in given list."""
  original_not_in: [String!]

  """All values less than the given value."""
  original_lt: String

  """All values less than or equal the given value."""
  original_lte: String

  """All values greater than the given value."""
  original_gt: String

  """All values greater than or equal the given value."""
  original_gte: String

  """All values containing the given string."""
  original_contains: String

  """All values not containing the given string."""
  original_not_contains: String

  """All values starting with the given string."""
  original_starts_with: String

  """All values not starting with the given string."""
  original_not_starts_with: String

  """All values ending with the given string."""
  original_ends_with: String

  """All values not ending with the given string."""
  original_not_ends_with: String
  w200: String

  """All values that are not equal to given value."""
  w200_not: String

  """All values that are contained in given list."""
  w200_in: [String!]

  """All values that are not contained in given list."""
  w200_not_in: [String!]

  """All values less than the given value."""
  w200_lt: String

  """All values less than or equal the given value."""
  w200_lte: String

  """All values greater than the given value."""
  w200_gt: String

  """All values greater than or equal the given value."""
  w200_gte: String

  """All values containing the given string."""
  w200_contains: String

  """All values not containing the given string."""
  w200_not_contains: String

  """All values starting with the given string."""
  w200_starts_with: String

  """All values not starting with the given string."""
  w200_not_starts_with: String

  """All values ending with the given string."""
  w200_ends_with: String

  """All values not ending with the given string."""
  w200_not_ends_with: String
}

input ImageWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deleteImage(where: ImageWhereUniqueInput!): Image
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  image(where: ImageWhereUniqueInput!): Image
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
}
